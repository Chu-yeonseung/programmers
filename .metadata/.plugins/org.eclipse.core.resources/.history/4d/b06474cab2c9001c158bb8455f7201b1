package level2;

import java.util.*;

class Djob implements Comparable<Djob>{
	
	int start;
	int time;
	
	public Djob(int start, int time) {
		this.start = start;
		this.time = time;
	}
	
	public int getStart() {
		return start;
	}
	public int getTime() {
		return time;
	}

	@Override
	public int compareTo(Djob o) {
		
		//System.out.println("this.start : " + this.start + " / o.start : " + o.start);
		
		return this.start - o.start;
	}
	
}

class RunTimeComprator implements Comparator<Djob>{

	@Override
	public int compare(Djob o1, Djob o2) {
		
		//System.out.println("this.start : " + o1.start + " / o.start : " + o2.start);
		
		return o1.getTime() - o2.getTime();
	}
	
}

class DiskController4 {
	
	public static void main(String args[]) {
		
		int[][] jobs = {{24, 10}, {28, 39}, {43, 20}, {37, 5}, {47, 22}, {20, 47}, {15, 34}, {15, 2}, {35, 43}, {26, 1}}; // 72
		
		PriorityQueue<Djob> pq1 = new PriorityQueue<Djob>();
		PriorityQueue<Djob> pq2 = new PriorityQueue<Djob>(new RunTimeComprator());
	
		
		for(int i=0; i<jobs.length; i++) {
			pq1.add(new Djob(jobs[i][0], jobs[i][1]));
		}
		int rStart = 0;
		int rTime = 0;
		while(!pq1.isEmpty()) {
			//System.out.println("pq1.poll().getStart() : " + pq1.poll().getStart());
			System.out.println("pq1.peek().getStart() : " + pq1.peek().getStart());
			if(pq1.peek().getStart() <= rStart) {
				while(pq1.peek().getStart() <= rStart) {
					pq2.add(new Djob(pq1.peek().getStart(), pq1.peek().getTime()));
				}
			}else {
				rStart = pq1.poll().getStart();
			}
			
		}
		
		
		
		
		for(int i=0; i<jobs.length; i++) {
			pq2.add(new Djob(jobs[i][0], jobs[i][1]));
		}
		
		while(!pq2.isEmpty()) {
			System.out.println("pq1.poll().getTime() : " + pq2.poll().getTime());
			
		}
		
		
	}

}