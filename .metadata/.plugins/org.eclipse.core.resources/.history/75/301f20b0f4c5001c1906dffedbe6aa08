package level2;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.PriorityQueue;
import java.util.Queue;

class Element implements Comparable<Element> {
	
	private int[] num;
	private int cnt;
	private int tot;
	
	public Element(int tot) {
		this.tot = tot;
	}
	
	public Element(int[] num, int cnt) {
		this.num = num;
		this.cnt = cnt;
	}

	public int getNum() {
		return 0;
	}

	@Override // Comparable 인터페이스의 compareTo 메서드 구현
	public int compareTo(Element o) {
		int rtn = 0;
		
		System.out.println("111");
		
		/*
		 * if(Math.abs(this.num2[this.cnt][0] - this.num2[this.cnt][1]) <
		 * Math.abs(o.num2[o.cnt][0] - o.num2[o.cnt][1])) { rtn = -1; }else
		 * if(Math.abs(this.num2[this.cnt][0] - this.num2[this.cnt][1]) >
		 * Math.abs(o.num2[o.cnt][0] - o.num2[o.cnt][1])) { rtn = -1; }else { rtn = 0; }
		 */
		return rtn;
	}
}


public class DiskController2 {
	
	public static void main(String args[]) {
		int[][] jobs = {{0, 3}, {1, 9}, {2, 6}};
		int sum = 0;
		
		new Element(jobs.length);
				
		PriorityQueue<Element> pq = new PriorityQueue<>();
		
		
		for(int i=0; i<jobs.length; i++) {
			pq.add(new Element(jobs[i], i));
		}
		System.out.println(pq.peek()[0]);
		
		/*
		 * if(Math.abs(jobs[i][0] - jobs[i][1]) > Math.abs(jobs[j][0] - jobs[j][1])) {
		 * 
		 * int tmp[] = {jobs[j][0], jobs[j][1]}; jobs[j] = jobs[i]; jobs[i] = tmp; }
		 */
		 
		for(int i=0; i<pq.size(); i++) {
		}
		
		for(int[] arr : jobs) {
			for(int num : arr) {
				//System.out.println(num);
			}
		}
		
	}
}
